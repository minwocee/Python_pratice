#https://www.acmicpc.net/problem/16917


'''
A: 양념1마리 가격
B: 후라이드 1마리 가격
C: 반반치킨 1마리 가격

X: 양념 최소 구매
Y: 후라이드 최소 구매

예제1: 1500 2000 1600 3 2

양념, 후라이드, 반반 가격 주어짐

3양념 2후라이드 를 사는법

반반4 + 양념1 = 3200 + 1500 =4700원

일단 반반치킨으로 구매를 하면 이득인지 부터 판별해야함

if 2*C < A+B:

else:
    A와 B 로만 채운다.

'''

# 만약 반반가격*2가 둘다 보다 싸면 반반으로 채운다.(초과분은 길바닥에 버림)
# X,Y의 개수를 맞추는게 관건이다.


#양념,후라보다 압도적으로 반반이 싼경우

# 반례 78 1 4 10 8 넣으면 80나와야하는데 220 나옴
'''
양념 78원
후라 1원
반반 4원

앙념 10마리주세오
후라 8마리 주세오

각각 모든 경우의 수를 살펴보자 (6가지 경우)

<경우의수 6가지>

양념 후라 반반*2 : 반반 쓸 이유가 없음(양념, 후라로 각각 채워주기)

양념 반반*2 후라 : 반반으로 후라 양 채우고, 양념으로 나머지 채우기

후라 반반*2 양념 : 양념은 반반으로 대체, 후라는 그냥 씀.
후라 앙념 반반*2 : 반반 쓸 이유가 없다.

반반*2 후라 양념 : 무조건 반반으로 채우는게 이득.
반반*2 양념 후라 : 무조건 반반으로 채우는게 이득.

'''
# 브루트포스로 해결해보자 (반반치킨을 0개 ~ max(X,Y))

import sys

A_price,B_price,half_price,A_count,B_count=map(int, sys.stdin.readline().split())


ans_list=[]

Full_price=2*half_price    #반반치킨-->한한치킨 변경
maxx=max(A_count,B_count)


#한한치킨이 0개 ~ X,Y중 가장 큰값 개수만큼 들어갈때의 경우의 수를 구한다.
for i in range(0,maxx+1):
    ans=0
    ans+=i*Full_price

    if (A_count-i)>=0:
        ans+=(A_count-i)*A_price
    
    if (B_count-i)>=0:
        ans+=(B_count-i)*B_price
    
    ans_list.append(ans)

print(min(ans_list))

