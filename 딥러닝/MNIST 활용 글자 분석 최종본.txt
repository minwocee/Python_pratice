#MNIST 손글씨 인식(컨볼류션 신경망 적용)
from tensorflow.keras.models import Sequential
from tensorflow.keras,layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D
from tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping
from tensorflow.keras.datasets import mnist
from tensorflow.keras.utils import to_categorial

import matplotlib.pyplot as plt
import numpy as np

(X_train,y_train), (X_test, y_test)= mnist.load_data()
X_train=X_train.reshape(X_train.shape[0], 28, 28,1).astpye('float32')/255
X_test=X_test.reshape(X_test.shpae[0], 28, 28, 1).astpye('float32')/255
y_train= to_categorical(y_train)
y_test= to_categorical(y_test)

model=Sequential()
model.add(Conv2D(32,kernel_size(3,3), input_shape=(28,28,1),activation='relu'))
model.add(Conv2D(64, (3,3),activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.25))
model.add(Flatten())
model.add(Dense(128, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(10, activation='softmax'))

model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

modelpath = "./MNISE_CNN.hdf5"
checkpointer = ModelCheckpoint(filepath=modelpath, monitor='val_loss', verbose=1, save_best_only=True)
early_stopping_callback = EarlyStopping(monitor='val_loss', patience=10)

history= model.fit(X_train, y_train, validation_split=0.25, epochs=30, batch_size=200, vervose=0, callbacks=[early_stopping_callback])